/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { FolderWhereUniqueInput } from "../../folder/base/FolderWhereUniqueInput";
import { Type } from "class-transformer";
import { AuditLogUpdateManyWithoutDocumentsInput } from "./AuditLogUpdateManyWithoutDocumentsInput";
import { CommentUpdateManyWithoutDocumentsInput } from "./CommentUpdateManyWithoutDocumentsInput";

@InputType()
class DocumentUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  title?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  file?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => FolderWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => FolderWhereUniqueInput)
  @IsOptional()
  @Field(() => FolderWhereUniqueInput, {
    nullable: true,
  })
  folder?: FolderWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => AuditLogUpdateManyWithoutDocumentsInput,
  })
  @ValidateNested()
  @Type(() => AuditLogUpdateManyWithoutDocumentsInput)
  @IsOptional()
  @Field(() => AuditLogUpdateManyWithoutDocumentsInput, {
    nullable: true,
  })
  auditLogs?: AuditLogUpdateManyWithoutDocumentsInput;

  @ApiProperty({
    required: false,
    type: () => CommentUpdateManyWithoutDocumentsInput,
  })
  @ValidateNested()
  @Type(() => CommentUpdateManyWithoutDocumentsInput)
  @IsOptional()
  @Field(() => CommentUpdateManyWithoutDocumentsInput, {
    nullable: true,
  })
  comments?: CommentUpdateManyWithoutDocumentsInput;
}

export { DocumentUpdateInput as DocumentUpdateInput };
